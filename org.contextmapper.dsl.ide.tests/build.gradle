dependencies {
	implementation project(':context-mapper-dsl')
	implementation project(':context-mapper-lsp')
	implementation group: 'commons-io', name: 'commons-io', version: '2.6'
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.1"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.1"
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.1'
	testImplementation "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
	testImplementation "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
}
test {
	useJUnitPlatform()
}
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false

def sourcesPath = configurations.create("sourcesPath") {
	visible = false
	canBeResolved = true
	canBeConsumed = false
	extendsFrom(configurations.implementation)
	attributes {
		attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
		attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
		attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
	}
}

def coverageDataPath = configurations.create("coverageDataPath") {
	visible = false
	canBeResolved = true
	canBeConsumed = false
	extendsFrom(configurations.implementation)
	attributes {
		attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
		attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
		attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
	}
}

def codeCoverageReport = tasks.register('codeCoverageReport', JacocoReport) {
	additionalClassDirs(configurations.runtimeClasspath)
	additionalSourceDirs(sourcesPath.incoming.artifactView { lenient(true) }.files)
	executionData(coverageDataPath.incoming.artifactView { lenient(true) }.files.filter { it.exists() })

	reports {
		xml.required = true
		html.required = true
	}
}

tasks.named("check") {
	dependsOn(codeCoverageReport)
}

