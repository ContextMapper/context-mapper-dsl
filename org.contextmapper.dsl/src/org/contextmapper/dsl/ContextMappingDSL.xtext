/*
 * Copyright 2018 The Context Mapper Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

grammar org.contextmapper.dsl.ContextMappingDSL with org.contextmapper.tactic.dsl.TacticDDDLanguage

import "http://contextmapper.org/tactic/dsl/tacticdsl" as tacticdsl

generate contextMappingDSL "http://www.contextmapper.org/dsl/ContextMappingDSL"

ContextMappingModel:
	(
		(firstLineComment=SL_COMMENT)? &
		(imports+=Import)* &
		(map = ContextMap)? &
		(boundedContexts += BoundedContext)* &
		(domains += Domain)* &
		(userRequirements += UserRequirement)* 
	)
;

Import :
'import' importURI=STRING;

ContextMap:
	{ContextMap} // make sure there is always a context map
	'ContextMap' (name=ID)?
	OPEN
		(('type' ('=')? type=ContextMapType)? &
		('state' ('=')? state=ContextMapState)?)
		('contains' boundedContexts += [BoundedContext] ("," boundedContexts += [BoundedContext])*)*
		relationships += Relationship*
	CLOSE
;

BoundedContext:
	(comment=SL_COMMENT)?
	'BoundedContext' name=ID (('implements' (implementedDomainParts+=[DomainPart]) ("," implementedDomainParts+=[DomainPart])*)? & 
		                      ('realizes' (realizedBoundedContexts+=[BoundedContext]) ("," realizedBoundedContexts+=[BoundedContext])*)? & 
		                      ('refines' refinedBoundedContext=[BoundedContext])?
	)
	(
		OPEN
			(('domainVisionStatement' ('=')? domainVisionStatement=STRING)? &
			('type' ('=')? type=BoundedContextType)? &
			(('responsibilities' ('=')? responsibilities+=STRING) ("," responsibilities+=STRING)*)? &
			('implementationTechnology' ('=')? implementationTechnology=STRING)? &
			('knowledgeLevel' ('=')? knowledgeLevel=KnowledgeLevel)?)
			modules += SculptorModule*
			aggregates += Aggregate*
		CLOSE
	)?
;

DomainPart:
	Domain | Subdomain
;

Domain:
	'Domain' name=ID
	(
		OPEN
			(('domainVisionStatement' ('=')? domainVisionStatement=STRING)? &
			(subdomains += Subdomain)*)
		CLOSE
	)?
;

Subdomain:
	'Subdomain' name=ID
	(
		OPEN
			(('type' ('=')? type=SubDomainType)? &
			('domainVisionStatement' ('=')? domainVisionStatement=STRING)?)
			entities += Entity*
			services += Service*
		CLOSE
	)?
;

Relationship:
	SymmetricRelationship | UpstreamDownstreamRelationship
;

SymmetricRelationship:
	Partnership | SharedKernel
;

Partnership:
	(
		(participant1 = [BoundedContext] '[''P'']' '<->' '[''P'']' participant2 = [BoundedContext]) | 
		('[''P'']' participant1 = [BoundedContext] '<->' '[''P'']' participant2 = [BoundedContext]) | 
		(participant1 = [BoundedContext] '[''P'']' '<->' participant2 = [BoundedContext] '[''P'']') |
		('[''P'']' participant1 = [BoundedContext] '<->' participant2 = [BoundedContext] '[''P'']') |
		(participant1 = [BoundedContext] 'Partnership' participant2 = [BoundedContext])
	)
	(':' name=ID)? 
	(OPEN
		('implementationTechnology' ('=')? implementationTechnology=STRING)?
	CLOSE)?
;

SharedKernel:
	(
		(participant1 = [BoundedContext] '[''SK'']' '<->' '[''SK'']' participant2 = [BoundedContext]) |
		('[''SK'']' participant1 = [BoundedContext] '<->' '[''SK'']' participant2 = [BoundedContext]) |
		(participant1 = [BoundedContext] '[''SK'']' '<->' participant2 = [BoundedContext] '[''SK'']') |
		('[''SK'']' participant1 = [BoundedContext] '<->' participant2 = [BoundedContext] '[''SK'']') |
		(participant1 = [BoundedContext] 'Shared-Kernel' participant2 = [BoundedContext]) |
		(participant1 = [BoundedContext] '<->' participant2 = [BoundedContext])
	)
	(':' name=ID)? 
	(OPEN
		('implementationTechnology' ('=')? implementationTechnology=STRING)?
	CLOSE)?
;

UpstreamDownstreamRelationship:
	CustomerSupplierRelationship | 
	(
		(
			(upstream = [BoundedContext] (('[''U'']') | ('['('U'',')?(upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)']')? '->' (('[''D'']') | ('['('D'',')?(downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)']')? downstream = [BoundedContext]) | 
			(downstream = [BoundedContext] (('[''D'']') | ('['('D'',')?(downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)']')? '<-' (('[''U'']') | ('['('U'',')?(upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)']')? upstream = [BoundedContext]) |
			(upstream = [BoundedContext] ('['((upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)?']')?'Upstream-Downstream'('['((downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?']')? downstream = [BoundedContext]) |
			(downstream = [BoundedContext] ('['((downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?']')?'Downstream-Upstream'('['((upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)?']')? upstream = [BoundedContext])
		)
		(':' name=ID)?
		(OPEN (
			('implementationTechnology' ('=')? implementationTechnology=STRING)? &
			(('exposedAggregates' ('=')? upstreamExposedAggregates += [Aggregate]) ("," upstreamExposedAggregates += [Aggregate])* (exposedAggregatesComment=SL_COMMENT)?)? &
			('downstreamRights' ('=')? downstreamGovernanceRights=DownstreamGovernanceRights)?
		)
		CLOSE)?
	)
;

CustomerSupplierRelationship:
	(
		(
			(upstream = [BoundedContext] '['('U'',')?'S'(','(upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)?']' '->' '['('D'',')?'C'(','(downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?']' downstream = [BoundedContext]) |
			(downstream = [BoundedContext] '['('D'',')?'C'(','(downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?']' '<-' '['('U'',')?'S'(','(upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)?']' upstream = [BoundedContext]) |
			(downstream = [BoundedContext] ('['((downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?']')?'Customer-Supplier'('['((upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)?']')? upstream = [BoundedContext]) |
			(upstream = [BoundedContext] ('['((upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)?']')?'Supplier-Customer'('['((downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?']')? downstream = [BoundedContext])
		)
		(':' name=ID)?
		(OPEN (
			('implementationTechnology' ('=')? implementationTechnology=STRING)? &
			(('exposedAggregates' ('=')? upstreamExposedAggregates += [Aggregate]) ("," upstreamExposedAggregates += [Aggregate])* (exposedAggregatesComment=SL_COMMENT)?)? &
			('downstreamRights' ('=')? downstreamGovernanceRights=DownstreamGovernanceRights)?
		)
		CLOSE)?
	)
;

Aggregate :
  (comment=ML_COMMENT)?
  (doc=STRING)?
  "Aggregate" name=ID (OPEN
    (
    	(('responsibilities' ('=')? responsibilities+=STRING) ("," responsibilities+=STRING)*)? &
    	((('useCases' | 'userRequirements') ('=')? userRequirements += [UserRequirement]) ("," userRequirements += [UserRequirement])*)? &
    	('owner' ('=')? owner=[BoundedContext])? & 
    	('knowledgeLevel' ('=')? knowledgeLevel=KnowledgeLevel)? &
    	('likelihoodForChange' ('=')? likelihoodForChange=LikelihoodForChange)?
    )
    ((services+=Service) |
     (resources+=Resource) |
     (consumers+=Consumer) |
     (domainObjects+=SimpleDomainObject))*
  CLOSE)?;

UserRequirement:
	UseCase | UserStory
;

/** 
 * Unfortunately there seems to be no mechanism to reuse identical attributes here.
 * Always ensure that UseCase and UserStory is kept in sync!
 */
UseCase:
	'UseCase' name=ID 
	(OPEN
		(('actor' ('=')? role=STRING)? &
		('interactions' ('=')? features+=Feature ("," features+=Feature)*)? &
		('benefit' ('=')? benefit=STRING)? &
		('isLatencyCritical' ('=')? isLatencyCritical?='true')? &
		(('reads' nanoentitiesRead+=STRING*) ("," nanoentitiesRead+=STRING)*)? &
        (('writes' nanoentitiesWritten+=STRING*) ("," nanoentitiesWritten+=STRING)*)?)  
	CLOSE)?
;

UserStory:
	'UserStory' name=ID 
	(OPEN
		((('As a' | 'As an') role=STRING ('I want to' features+=Feature)+ 'so that' benefit=STRING)? &
		('isLatencyCritical' ('=')? isLatencyCritical?='true')? &
		(('reads' nanoentitiesRead+=STRING*) ("," nanoentitiesRead+=STRING)*)? &
        (('writes' nanoentitiesWritten+=STRING*) ("," nanoentitiesWritten+=STRING)*)?)  
	CLOSE)?
;

Feature:
	verb=(UserActivityDefaultVerb | STRING) ('a' | 'an')? entity=STRING
;

UserActivityDefaultVerb:
	'create' | 'read' | 'update' | 'delete'
;

SculptorModule :
  (doc=STRING)?
  "Module" name=ID (OPEN
    (external?="external")?
    ("basePackage" "=" basePackage=JavaIdentifier )?
    ("hint" "=" hint=STRING)?
    ((services+=Service) |
     (resources+=Resource) |
     (consumers+=Consumer) |
     (domainObjects+=SimpleDomainObject) |
     (aggregates+=Aggregate))*
  CLOSE)?;

enum UpstreamRole:
	PUBLISHED_LANGUAGE = 'PL' | OPEN_HOST_SERVICE = 'OHS'
;

enum DownstreamRole:
	ANTICORRUPTION_LAYER = 'ACL' | CONFORMIST = 'CF'
;

enum ContextMapState:
	AS_IS | TO_BE
;

enum ContextMapType:
	SYSTEM_LANDSCAPE | ORGANIZATIONAL
;

enum BoundedContextType:
	FEATURE | APPLICATION | SYSTEM | TEAM
;

enum SubDomainType:
	CORE_DOMAIN | SUPPORTING_DOMAIN | GENERIC_SUBDOMAIN
;

enum DownstreamGovernanceRights:
	INFLUENCER | OPINION_LEADER | VETO_RIGHT | DECISION_MAKER | MONOPOLIST
;

enum KnowledgeLevel :
  META="META" | CONCRETE="CONCRETE"
;

enum LikelihoodForChange : 
	NORMAL | RARELY | OFTEN
;

// define terminals
terminal OPEN: '{';
terminal CLOSE: '}';
