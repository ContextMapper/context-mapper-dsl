/*
 * Copyright 2018 The Context Mapper Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

grammar org.contextmapper.dsl.ContextMappingDSL with org.contextmapper.tactic.dsl.TacticDDDLanguage

generate contextMappingDSL "http://www.contextmapper.org/dsl/ContextMappingDSL"

ContextMappingModel:
	(
		(map = ContextMap)? &
		(boundedContexts += BoundedContext)* &
		(subdomains += Subdomain)*
	)
;

ContextMap:
	{ContextMap} // make sure there is always a context map
	'ContextMap'
	OPEN
		(('state' '=' state=ContextMapState)? &
		('type' '=' type=ContextMapType)?)
		boundedContexts += [BoundedContext]*
		relationships += Relationship*
	CLOSE
;

BoundedContext:
	'BoundedContext' name=ID (('implements' (implementedSubdomains+=[Subdomain]) ("," implementedSubdomains+=[Subdomain])*)? & ('realizes' bcRealizedByTeam = [BoundedContext])?)
	(
		OPEN
			(('domainVisionStatement' '=' domainVisionStatement=STRING)? &
			('type' '=' type=BoundedContextType)? &
			(('responsibilities' '=' responsibilities+=Responsibility) ("," responsibilities+=Responsibility)*)? &
			('implementationTechnology' '=' implementationTechnology=STRING)? &
			('knowledgeLevel' '=' knowledgeLevel=KnowledgeLevel)?)
			modules += Module*
			aggregates += Aggregate*
		CLOSE
	)?
;

Subdomain:
	'Subdomain' name=ID
	(
		OPEN
			(('type' '=' type=SubDomainType)? &
			('domainVisionStatement' '=' domainVisionStatement=STRING)?)
			entities += Entity*
		CLOSE
	)?
;

Relationship:
	SymmetricRelationship | UpstreamDownstreamRelationship
;

SymmetricRelationship:
	Partnership | SharedKernel
;

Partnership:
	('@'name=ID)?
	((participant1 = [BoundedContext] 'Partnership' participant2 = [BoundedContext]) |
	(participant1 = [BoundedContext] '<->' participant2 = [BoundedContext] ':' 'Partnership')) 
;

SharedKernel:
	('@'name=ID)?
	((participant1 = [BoundedContext] 'Shared-Kernel' participant2 = [BoundedContext]) |
	(participant1 = [BoundedContext] '<->' participant2 = [BoundedContext] ':' 'Shared-Kernel')) 
;

UpstreamDownstreamRelationship:
	CustomerSupplierRelationship | 
	(('@'name=ID)? 
		(((upstream = [BoundedContext] 'Upstream-Downstream' downstream = [BoundedContext] | 
		(upstream = [BoundedContext] '<-' downstream = [BoundedContext] ':' 'Upstream-Downstream') |
		(downstream = [BoundedContext] '->' upstream = [BoundedContext] ':' 'Upstream-Downstream')
	))
	(OPEN
		(('upstream' 'implements' (upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)? &
		('downstream' 'implements' (downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?)
	CLOSE)?))
;

CustomerSupplierRelationship:
	('@'name=ID)?
	(((downstream = [BoundedContext] 'Customer-Supplier' upstream = [BoundedContext]) | 
		(downstream = [BoundedContext] '->' upstream = [BoundedContext] ':' 'Customer-Supplier') |
		(upstream = [BoundedContext] '<-' downstream = [BoundedContext] ':' 'Customer-Supplier')
	)
	(OPEN
		(('supplier' 'implements' (upstreamRoles+=UpstreamRole) ("," upstreamRoles+=UpstreamRole)*)? &
		('customer' 'implements' (downstreamRoles+=DownstreamRole) ("," downstreamRoles+=DownstreamRole)*)?)
	CLOSE)?)
;

enum UpstreamRole:
	PUBLISHED_LANGUAGE | OPEN_HOST_SERVICE
;

enum DownstreamRole:
	ANTICORRUPTION_LAYER | CONFORMIST
;

enum ContextMapState:
	AS_IS | TO_BE
;

enum ContextMapType:
	SYSTEM_LANDSCAPE | ORGANIZATIONAL
;

enum BoundedContextType:
	FEATURE | APPLICATION | SYSTEM | TEAM
;

enum SubDomainType:
	CORE_DOMAIN | SUPPORTING_DOMAIN | GENERIC_SUBDOMAIN
;

// define terminals
terminal OPEN: '{';
terminal CLOSE: '}';
