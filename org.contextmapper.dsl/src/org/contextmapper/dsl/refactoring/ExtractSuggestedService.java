/*
 * Copyright 2020 The Context Mapper Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.contextmapper.dsl.refactoring;

import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.contextmapper.dsl.cml.CMLResourceContainer;
import org.contextmapper.dsl.contextMappingDSL.BoundedContext;
import org.contextmapper.dsl.contextMappingDSL.ContextMappingDSLFactory;
import org.contextmapper.dsl.contextMappingDSL.ContextMappingModel;
import org.contextmapper.dsl.exception.ContextMapperApplicationException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;

import ch.hsr.servicecutter.solver.SolverAlgorithm;

/**
 * This refactoring can be applied after having generated a service cut
 * suggestion with Service Cutter. It allows to extract a suggested service in
 * the original CML model.
 */
public class ExtractSuggestedService extends AbstractRefactoring implements SemanticCMLRefactoring {

	public static final String SERVICE_CUTTER_SUGGESTION_FILE_NAME_PATTERN = "(^.*)_("
			+ String.join("|", Arrays.asList(SolverAlgorithm.values()).stream().map(a -> a.toString().replace(" ", "_")).collect(Collectors.toList())) + ")_Cut_[0-9].cml";

	private BoundedContext suggestedService;
	private String newBoundedContextName;

	public ExtractSuggestedService(BoundedContext suggestedService, String newBoundedContextName) {
		this.suggestedService = suggestedService;
		checkPreconditions();
		this.newBoundedContextName = newBoundedContextName;
	}

	@Override
	protected void doRefactor() {
		BoundedContext bc = ContextMappingDSLFactory.eINSTANCE.createBoundedContext();
		bc.setName(newBoundedContextName);

		// TODO: move nanoentities into new context

		model.getBoundedContexts().add(bc);
	}

	public URI constructOriginalModelUri() {
		Resource currentResource = suggestedService.eResource();
		String fileName = currentResource.getURI().lastSegment();
		if (!fileName.matches(SERVICE_CUTTER_SUGGESTION_FILE_NAME_PATTERN))
			throw new ContextMapperApplicationException("The given file name (" + fileName
					+ ") does not match with the pattern generated by Service Cutter. Please do not rename files generated by Service Cutter. This is how we identify whether a model is a decomposition suggestion or not.");
		Pattern r = Pattern.compile(SERVICE_CUTTER_SUGGESTION_FILE_NAME_PATTERN);
		Matcher m = r.matcher(fileName);
		m.find();
		return currentResource.getURI().trimFileExtension().trimSegments(1).appendSegment(m.group(1)).appendFileExtension("cml");
	}

	private void checkPreconditions() {
		if (suggestedService.eResource() == null)
			throw new ContextMapperApplicationException("The given Bounded Context is not part of a persisted CML resource. Only Bounded Contexts loaded from a persisted CML file are allowed here.");
		constructOriginalModelUri();
	}

}
