apply plugin: 'signing'

dependencies {
	compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile group: 'org.freemarker', name: 'freemarker', version: '2.3.22'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.9'
	compile group: 'org.contextmapper', name: 'henshin-interpreter', version: '1.4.0'
	compile group: 'org.contextmapper', name: 'context-map-generator', version: '1.1.0'
	compile group: 'org.contextmapper', name: 'service-cutter-library', version: '1.1.4'
}
configurations {
	mwe2 {
		extendsFrom compile
	}
}

dependencies {
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.11.1"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 "org.eclipse.xtext:xtext-antlr-generator:[2.1.1, 3)"
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/org/contextmapper/dsl/GenerateContextMappingDSL.mwe2"
	inputs.file "src/org/contextmapper/dsl/ContextMappingDSL.xtext"
	outputs.dir "src-gen"
	args += "src/org/contextmapper/dsl/GenerateContextMappingDSL.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

javadoc {
    options.tags = [ "model", "generated", "ordered", "Inject" ]
    exclude 'org/contextmapper/dsl/contextMappingDSL/impl/**'
    exclude 'org/contextmapper/servicecutter/dsl/serviceCutterConfigurationDSL/impl/**'
    exclude 'org/contextmapper/tactic/dsl/tacticdsl/impl/**'
    exclude 'org/contextmapper/tactic/dsl/serializer/**'
    exclude 'org/contextmapper/dsl/serializer/**'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
    required { gradle.taskGraph.hasTask("publishMavenJavaPublicationToMavenLocal") || gradle.taskGraph.hasTask("publishMavenJavaPublicationToMavenRepository") }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
        	customizePom(pom)
        	
            artifactId = "${project.name}"
            groupId = "${project.group}"
            version = "${project.version}"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
            
            signArchives.signatures.each { signature ->
                artifact(signature) {
                    def matcher = signature.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = signature.type
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "${ossReleaseStagingRepository}"
            def snapshotsRepoUrl = "${ossSnapshotRepository}"
            url = project.version.text().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Use the ContextMapper DSL in your standalone application.'
            name 'ContextMapper DSL'
            url 'https://github.com/ContextMapper/context-mapper-dsl'
            organization {
                name 'Context Mapper'
                url 'https://contextmapper.org/'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/ContextMapper/context-mapper-dsl/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/ContextMapper/context-mapper-dsl/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/ContextMapper/context-mapper-dsl'
                connection 'scm:git:git://github.com/ContextMapper/context-mapper-dsl.git'
                developerConnection 'scm:git:ssh://git@github.com:ContextMapper/context-mapper-dsl.git'
            }
            developers {
                developer {
                    name 'Stefan Kapferer'
                    email 'stefan@contextmapper.org'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
