/**
 * A RequestStatus is a value object that is used to represent
 * the current status of an insurance quote request.
 *
 * The following diagram shows the possible state transitions:
 *
 * <pre>
 *
 *                                               │
 *                                               ▼
 *                                        ┌────────────┐
 *                                        │  REQUEST_  │
 *                                        │ SUBMITTED  │
 *                                        └────────────┘
 *                                               │
 *                             ┌─────────────────┴────────────────┐
 *                             │                                  │
 *                             ▼                                  ▼
 *                      ┌────────────┐                     ╔════════════╗
 *                      │   QUOTE_   │                     ║  REQUEST_  ║
 *          ┌───────────│  RECEIVED  │─────────────┐       ║  REJECTED  ║
 *          │           └────────────┘             │       ╚════════════╝
 *          │                  │                   │
 *          │                  │                   │
 *          ▼                  ▼                   ▼
 *   ╔════════════╗     ┌────────────┐      ╔════════════╗
 *   ║   QUOTE_   ║     │   QUOTE_   │      ║   QUOTE_   ║
 *   ║  REJECTED  ║     │  ACCEPTED  │─────▶║  EXPIRED   ║
 *   ╚════════════╝     └────────────┘      ╚════════════╝
 *                             │
 *                             │
 *                             ▼
 *                      ╔════════════╗
 *                      ║  POLICY_   ║
 *                      ║  CREATED   ║
 *                      ╚════════════╝
 *
 * </pre>
 */
 BoundedContext InsuranceQuotes {
 	
 	Application {
 		Command SubmitRequest // command triggered by user
 		
 		Flow QuoteRequestFlow {
 			command SubmitRequest delegates to QuoteRequest[-> SUBMITTED] emits event RequestSubmitted
 			event RequestSubmitted + RequestSubmitted triggers operation checkRequest
 			operation checkRequest delegates to QuoteRequest[SUBMITTED -> RECEIVED X REJECTED] emits event QuoteReceived X RequestRejected
 			event QuoteReceived triggers operation receiveAndCheckQuote
 			operation receiveAndCheckQuote delegates to QuoteRequest[RECEIVED -> REJECTED X ACCEPTED X EXPIRED] emits event QuoteRejected X QuoteAccepted X QuoteExpired
 			event QuoteAccepted triggers operation accept
 			operation accept delegates to QuoteRequest[ACCEPTED -> POLICY_CREATED X EXPIRED] emits event PolicyCreated X QuoteExpired 
 		}
 	}
 	
 	Aggregate QuoteRequest {
 		Entity Request {
 			aggregateRoot
 		}
 		
 		DomainEvent RequestSubmitted
 		DomainEvent QuoteReceived
 		DomainEvent RequestRejected
 		DomainEvent QuoteRejected
 		DomainEvent QuoteAccepted
 		DomainEvent QuoteExpired
 		DomainEvent PolicyCreated
 		
 		Service QuoteRequestService {
 			void checkRequest(@Request request);
 			void receiveAndCheckQuote(@Request request);
 			void reject(@Request request);
 			void accept(@Request request);
 		}
 		
 		enum RequestState {
 			aggregateLifecycle
 			SUBMITTED, RECEIVED, REJECTED, ACCEPTED, EXPIRED, POLICY_CREATED
 		}
 	}
 	
 }